#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Stack structure
typedef struct {
    int items[MAX_SIZE];
    int top;
} Stack;

// Function prototypes
void createStack(Stack* stack);
int isEmpty(Stack* stack);
int isFull(Stack* stack);
void push(Stack* stack, int item);
int pop(Stack* stack);
void display(Stack* stack);
int getMenuChoice();

// Function to create an empty stack
void createStack(Stack* stack) {
    stack->top = -1;
}

// Function to check if stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to check if stack is full
int isFull(Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an item onto the stack
void push(Stack* stack, int item) {
    if (isFull(stack)) {
        printf("Stack Overflow: Unable to push item\n");
    } else {
        stack->items[++stack->top] = item;
        printf("Item inserted successfully!\n");
    }
}

// Function to pop an item from the stack
int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow: Unable to pop item\n");
        return -1;
    } else {
        return stack->items[stack->top--];
    }
}

// Function to display the contents of the stack
void display(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
    } else {
        printf("Stack: ");
        for (int i = 0; i <= stack->top; ++i) {
            printf("%d ", stack->items[i]);
        }
        printf("\n");
    }
}

// Function to display the menu and get the user's choice
int getMenuChoice() {
    int choice;

    printf("\nStack Menu\n");
    printf("1. Insert\n");
    printf("2. Delete\n");
    printf("3. Display\n");
    printf("4. Exit\n");

    printf("Enter your choice: ");
    scanf("%d", &choice);

    return choice;
}

// Main function
int main() {
    Stack myStack;
    createStack(&myStack);

    while (1) {
        int choice = getMenuChoice();

        switch (choice) {
            case 1: {
                int item;
                printf("Enter the item to insert: ");
                scanf("%d", &item);
                push(&myStack, item);
                break;
            }
            case 2: {
                int popped_item = pop(&myStack);
                if (popped_item != -1) {
                    printf("Popped item: %d\n", popped_item);
                }
                break;
            }
            case 3:
                display(&myStack);
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
 